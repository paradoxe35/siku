(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[16],{

/***/ "./node_modules/react-laravel-paginex/dist/Pagination.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-laravel-paginex/dist/Pagination.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Pagination = /*#__PURE__*/function (_Component) {\n  _inherits(Pagination, _Component);\n\n  var _super = _createSuper(Pagination);\n\n  function Pagination(_props) {\n    var _this;\n\n    _classCallCheck(this, Pagination);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getProps\", function (props) {\n      var defaultProps = Pagination.defaultProps.options;\n      var options = _this.props.options;\n      Object.keys(defaultProps).forEach(function (key) {\n        options[key] = props[key] ? props[key] : props['options'][key] ? props['options'][key] : defaultProps[key];\n      });\n\n      _this.setState({\n        options: options,\n        paginationData: props.data\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCurrent\", function (page) {\n      var currentPage = _this.state.paginationData.meta ? _this.state.paginationData.meta.current_page : _this.state.paginationData.current_page;\n      return currentPage === page;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (page) {\n      var parameters = {};\n\n      if (_this.props.requestParams) {\n        parameters = _this.props.requestParams;\n      }\n\n      parameters.page = page;\n\n      _this.props.changePage(parameters);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateButtonsPrev\", function () {\n      var options = _this.state.options;\n\n      if (options.buttonIcons) {\n        return /*#__PURE__*/_react[\"default\"].createElement(\"i\", {\n          className: options.prevButtonIcon\n        });\n      }\n\n      return options.prevButtonText;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generateButtonsNext\", function () {\n      var options = _this.state.options;\n\n      if (options.buttonIcons) {\n        return /*#__PURE__*/_react[\"default\"].createElement(\"i\", {\n          className: options.nextButtonIcon\n        });\n      }\n\n      return options.nextButtonText;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"generatePagination\", function () {\n      var paginationData = _this.state.paginationData;\n      var pagination;\n\n      if (Object.keys(paginationData).length) {\n        var options = _this.state.options;\n        var current = paginationData.hasOwnProperty('current_page') ? paginationData.current_page : paginationData.meta.current_page,\n            last = paginationData.hasOwnProperty('last_page') ? paginationData.last_page : paginationData.meta.last_page,\n            delta = parseInt(options.numbersCountForShow),\n            left = current - delta,\n            right = current + delta + 1,\n            range = [],\n            rangeWithDots = [],\n            l;\n\n        for (var i = 1; i <= last; i++) {\n          if (i === 1 || i === last || i >= left && i < right) {\n            range.push(i);\n          }\n        }\n\n        for (var _i = 0, _range = range; _i < _range.length; _i++) {\n          var _i2 = _range[_i];\n\n          if (l) {\n            if (_i2 - l === 2) {\n              rangeWithDots.push(l + 1);\n            } else if (_i2 - l !== 1) {\n              rangeWithDots.push('...');\n            }\n          }\n\n          rangeWithDots.push(_i2);\n          l = _i2;\n        }\n\n        var nextPageUrl = paginationData.hasOwnProperty('next_page_url') ? paginationData.next_page_url : paginationData.links.next;\n        var prevPageUrl = paginationData.hasOwnProperty('prev_page_url') ? paginationData.prev_page_url : paginationData.links.prev;\n        pagination = /*#__PURE__*/_react[\"default\"].createElement(\"ul\", {\n          className: options.containerClass\n        }, prevPageUrl ? /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n          className: options.prevButtonClass,\n          onClick: function onClick(event) {\n            event.preventDefault();\n\n            _this.handleClick(current - 1);\n          }\n        }, /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n          href: \"\",\n          className: options.numberClass\n        }, _this.generateButtonsPrev())) : \"\", rangeWithDots.map(function (page, index) {\n          return _this.generateNumber(page, index);\n        }), nextPageUrl ? /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n          className: options.nextButtonClass,\n          onClick: function onClick(event) {\n            event.preventDefault();\n\n            _this.handleClick(current + 1);\n          }\n        }, /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n          href: \"\",\n          className: options.numberClass\n        }, _this.generateButtonsNext())) : \"\");\n      }\n\n      return pagination;\n    });\n\n    _this.state = {\n      options: {},\n      paginationData: {},\n      nextPageUrl: null,\n      prevPageUrl: null,\n      currentPage: null\n    };\n    return _this;\n  }\n\n  _createClass(Pagination, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getProps(this.props);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(props, nextContext) {\n      this.getProps(props);\n    } // Transform props\n\n  }, {\n    key: \"generateNumber\",\n    value: function generateNumber(page, index) {\n      var _this2 = this;\n\n      var options = this.state.options;\n      return /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n        className: this.isCurrent(page) ? options.numberButtonClass + \" \" + options.activeClass : options.numberButtonClass,\n        key: index\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n        href: \"\",\n        className: options.numberClass,\n        onClick: function onClick(event) {\n          event.preventDefault();\n\n          _this2.handleClick(page === '...' ? index + 1 : page);\n        }\n      }, page));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, this.generatePagination());\n    }\n  }]);\n\n  return Pagination;\n}(_react.Component);\n\nPagination.defaultProps = {\n  options: {\n    containerClass: \"pagination\",\n    buttonIcons: false,\n    prevButtonClass: \"page-item\",\n    prevButtonText: \"Prev\",\n    prevButtonIcon: \"fa fa-chevron-left\",\n    nextButtonClass: \"page-item\",\n    nextButtonText: \"Next\",\n    nextButtonIcon: \"fa fa-chevron-right\",\n    numberButtonClass: \"page-item\",\n    numberClass: \"page-link\",\n    numbersCountForShow: 2,\n    activeClass: 'active'\n  },\n  data: {}\n};\nPagination.propTypes = {\n  options: _propTypes[\"default\"].shape({\n    containerClass: _propTypes[\"default\"].string,\n    buttonIcons: _propTypes[\"default\"].bool,\n    nextButtonClass: _propTypes[\"default\"].string,\n    nextButtonText: _propTypes[\"default\"].string,\n    nextButtonIcon: _propTypes[\"default\"].string,\n    prevButtonClass: _propTypes[\"default\"].string,\n    prevButtonText: _propTypes[\"default\"].string,\n    prevButtonIcon: _propTypes[\"default\"].string,\n    numberButtonClass: _propTypes[\"default\"].string,\n    numberClass: _propTypes[\"default\"].string,\n    numberCountForShow: _propTypes[\"default\"].number,\n    activeClass: _propTypes[\"default\"].string\n  }),\n  data: _propTypes[\"default\"].object\n};\nvar _default = Pagination;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-laravel-paginex/dist/Pagination.js\n");

/***/ })

}]);